services:
  traefik:
    image: traefik:v2.4
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  user_and_teams_service:
    build:
      context: services/user_and_teams_service
      dockerfile: Dockerfile
    command: python app/main.py
    tty: true
    volumes:
      - ./services/user_and_teams_service:/app/:cached
      - ./.docker/.ipython:/root/.ipython:cached
    environment:
      PYTHONPATH: .
      SECURITY_KEY: "709cb22f047a59f492c4d6407e627240e2272bda11ab791c16fb4f4661f7285a95ba6efbc1bbf762cddcc3710a1487f4a3242f21b2d9cd751b3154a452c5a286"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_HOST: user_and_teams_service_postgresql
      POSTGRES_PORT: 5432
      POSTGRES_NAME: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
    labels:
      - "traefik.http.routers.user_and_teams_service.rule=Host(`user_and_teams_service.localhost`)"
      - "traefik.http.services.user_and_teams_service.loadbalancer.server.port=8000"
    depends_on:
      - "user_and_teams_service_postgresql"
      - "redis"

  user_and_teams_service_postgresql:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data:cached

  redis:
    image: redis:latest
    container_name: redis_instance
    ports:
      - "6379:6379"
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - redis_data:/data

volumes:
  db-data:
  redis_data: